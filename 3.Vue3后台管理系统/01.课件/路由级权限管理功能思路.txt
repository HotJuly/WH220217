前提:必须先完成真实登录才能实现该功能

流程:
	1.先给所有的路由对象添加路由别名
		目的:就是为了后续实现过滤异步路由操作而准备的

	2.将routes.ts文件中的staticRoutes数组拆分为三个数组
		分别为常量路由,异步路由,任意路由三种
		
	3.在router/index.ts文件中,将常量路由部分的路由对象交给路由器进行注册
		实现常量路由部分的访问,必须要传入常量路由,否则当前项目连登陆界面都看不到

	4.在stores/userInfo.ts中,在getInfo中,将用户通过info接口兑换的帐号信息中的routes数组获取到手
		routes数组中,存放的是当前帐号能够访问的异步路由名称

	5.通过filterAsyncRoutes方法,递归过滤异步路由数组,最终返回一个当前账号所能访问的所有的异步路由对象组成的数组
		注意:记得处理下children数组,因为能访问父级路由,不代表内部所有子路由都能访问

	6.通过router.addRoute方法,配合手头得到的异步路由数组,实现异步路由的动态注入功能

	7.将当前账号所能访问的所有的常量路由,异步路由以及任意路由,全部存放到menuRoutes中,实现左侧导航列表的正常显示


期间遇到的BUG:
	1.注册了异步路由成功,但是无法通过地址直接访问
		原因:因为VueRouter使用addRoute方法注册的路由,在本次跳转过程中不生效,只有本次跳转结束之后,有再发生跳转,才能生效
		解决方法:将next()改为next(to)即可
			因为VueRouter在实现next(to)的时候,会强制路由器重新再次跳转to地址,相当于跳转两次,所以才能解决这个问题

	2.上次如果登录的账号权限不足,删除了部分的异步路由对象,很可能导致下次登录权限更高的账号时,无法显示本该有的异步路由
		原因:因为ES6模块的效果,一个文件暴露出来的对象,无论多少个文件引入,都是同一个对象,使用相同的地址值
		解决方法:在过滤异步路由的时候,实行深克隆操作,防止对原数组进行修改